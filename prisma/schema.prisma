// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  userId    Int      @id @default(autoincrement())
  role      Role     @default(USER)
  password  String
  firstName String?
  lastName  String?
  phone     String?
  email     String   @unique
  plan      Plan[]
  review    Review[]
}

model Plan {
  planId     Int      @id @default(autoincrement())
  name       String
  budget     Float
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}

model Location {
  locationId    Int             @id @default(autoincrement())
  name          String
  description   String
  category      Category        @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Cascade)
  categoryId    Int
  map           String?
  locationScore LocationScore[]
  locationImg   LocationImg[]
  plan          Plan[]
}

model Category {
  categoryId Int    @id @default(autoincrement())
  name       String

  locations Location[]
}

model LocationScore {
  scoreId    Int      @id @default(autoincrement())
  score      Int
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}

model LocationImg {
  id         Int      @id @default(autoincrement())
  url        String
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}

model Review {
  reviewId  Int      @id @default(autoincrement())
  placeName String
  comment   String?
  date      DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  reviewRating ReviewRating[]
  reviewImg    ReviewImg[]
}

model ReviewRating {
  ratingId Int    @id @default(autoincrement())
  score    Int
  review   Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade, onUpdate: Cascade)
  reviewId Int
}

model ReviewImg {
  imgId    Int    @id @default(autoincrement())
  url      String
  review   Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade, onUpdate: Cascade)
  reviewId Int
}
