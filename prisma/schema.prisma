// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  password  String
  firstName String?
  lastName  String?
  phone     String?
  email     String   @unique
  Plan      Plan[]
  Review    Review[]
}

model Plan {
  planId   Int        @id @default(autoincrement())
  name     String
  budget   Float
  user     User       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId   Int
  Location Location[]
}

model Location {
  locationId    Int             @id @default(autoincrement())
  name          String
  description   String
  plan          Plan            @relation(fields: [planId], references: [planId], onDelete: Cascade, onUpdate: Cascade)
  planId        Int
  Category      Category        @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Cascade)
  categoryId    Int
  LocationScore LocationScore[]
  ProductImg    ProductImg[]
}

model Category {
  categoryId Int    @id @default(autoincrement())
  name       String

  Locations Location[]
}

model LocationScore {
  scoreId    Int      @id @default(autoincrement())
  score      Int
  Location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}

model ProductImg {
  id         Int      @id @default(autoincrement())
  url        String
  Location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}

model Review {
  reviewId  Int      @id @default(autoincrement())
  placeName String
  comment   String?
  date      DateTime @default(now())
  userId    Int
  User      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  ReviewRating ReviewRating[]
  ReviewImg    ReviewImg[]
}

model ReviewRating {
  ratingId Int    @id @default(autoincrement())
  score    Int
  Review   Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade, onUpdate: Cascade)
  reviewId Int
}

model ReviewImg {
  imgId    Int    @id @default(autoincrement())
  url      String
  Review   Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade, onUpdate: Cascade)
  reviewId Int
}
