// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  userId    Int               @id @default(autoincrement())
  role      Role              @default(USER)
  password  String
  firstName String?
  lastName  String?
  phone     String?
  email     String            @unique
  plan      Plan[]
  comments  LocationComment[]
  locationScore LocationScore[]
}

model Plan {
  planId     Int      @id @default(autoincrement())
  name       String
  budget     Float
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}

model Location {
  locationId    Int               @id @default(autoincrement())
  name          String
  description   String            @db.VarChar(5000)
  category      Category          @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Cascade)
  categoryId    Int
  map           String?           @db.VarChar(3000)
  address       String?           @db.VarChar(3000)
  phone         String?
  date          String?
  budget        Budget?
  price         Int?
  averageScore  Float?
  locationScore LocationScore[]
  locationImg   LocationImg[]
  plan          Plan[]
  comments      LocationComment[]
}

enum Budget {
  LOW
  MEDIUM
  HIGH
}

model Category {
  categoryId Int    @id @default(autoincrement())
  name       String

  locations Location[]
}

model LocationScore {
  scoreId    Int      @id @default(autoincrement())
  score      Int
  user       User?    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId     Int?
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
  createdAt  DateTime @default(now())
}


model LocationImg {
  id         Int      @id @default(autoincrement())
  url        String
  filename   String?   @unique
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
}
model LocationComment {
  commentId  Int                  @id @default(autoincrement())
  text       String               @db.VarChar(3000)
  date       DateTime             @default(now())
  userId     Int
  user       User                 @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  locationId Int
  location   Location             @relation(fields: [locationId], references: [locationId], onDelete: Cascade, onUpdate: Cascade)
  images     LocationCommentImg[]
}

model LocationCommentImg {
  imgId     Int             @id @default(autoincrement())
  url       String
  commentId Int
  comment   LocationComment @relation(fields: [commentId], references: [commentId], onDelete: Cascade, onUpdate: Cascade)
}
